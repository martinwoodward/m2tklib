focus group:
 1) Über das parent element laufen
 2) Ohne das parent element

Eventuell solte man doch ein flag dafür einführen, damit man den zustand
des parent elements unterscheiden kann.

Options:
Leaf elements (no list)
o0:	Can not get navigation focus, with t0 this is a read only field
o1: 	Can get navigation focus
t0:	Not touchable
t1:	Touchable
List elements
o0:	No focus group, just proceed to the child elements
o1:	Define focus group. "Go up" event is required to leave focus group
o2:	Focus group navigation goes through this list element. 
t?:	Ignored for list elements

Element 
Leaf Elements:
  - no focus
  - nav focus
  - touch focus
List Elements
 - no focus (always)
 - nav upper group (o1)
 - nav group (o1 and o2) 
 
Vielleicht sollte man die navigation besser trennen
1. Suche nach dem aktuellen Element und ermitteln der eigenschaften, insbesondere,
  - focus group tiefe des aktuellen Elements
  - focus parent des aktuellen Elements
2. Ermitteln des ersten und letzten elements des aktuellen focus parent
  Hier wird jetzt nur noch der tiefenzähler benötigt.
  state 0: Suche nach dem parent
  state 1: erstes und letztes element in dieser gruppe (gleiche depth)
  --> damit können first und last implementiert werden
Ermitteln von First/last:
  erledigt, aus dem 2. Schritt
Ermitteln von next:
 State 0: Suche nach dem aktuellen Element
 state 1: Suche nach dem nächsten element gleicher tiefe
   wenn es das nicht gibt --> First
Ermitteln von prev:
  State 0: Suche nach dem Parent, last element mit 0 initalisieren
  State 1: Suche nach dem aktuellen Element
    wenn nicht gefunden: last element = current element
    wenn gefunden; last element ist prev, wenn last lement 0 ist --> Last
 
 
=============

vielleicht doch alles zu kompliziert. Alternative:
Einführen eines Filters, der nur die aktive Gruppe darstellt.
Optionen: 
"g<num>"
Abfrage über callback funktion, so daß sich auch elemente über die gruppe hinwegsetzen können
(parent element für text und zahleneingabe)
Buttons zum setzen der Gruppe, beispielsweise via "v<num>"
Allerdings wäre dann die wiederverwendung etwas eingeschränkt.

Das besste wäre wohl das filtern komplett in die callback zu verlagern.
Es sollte nur noch eine Nachricht geben:
IS_NAV
IS_TOUCH
Alles andere kann man dann da drin regeln


TODO

Add selectable procedure
  #define M2EL_MSG_IS_SELECTABLE 31
  #define M2EL_MSG_IS_TOUCHABLE 32
  in m2_elapi entsprechende funktionen einführen.
  in m2_nav diese funktionen nutzen

  vermutlich brauchen wir die nachrichten nicht --> gelöst über 
  eine eigene function in m2_nav.c
  
=============

Option Specification

o	o0:	can not get focus,	o1: can get focus



=============
Size Calculation


length[0..3]	inner area
lentgh[4..7]	border

length[0, 4]	left		(horizontal min)
length[1, 5]	right		(horizontal max)
length[2, 6]	bottom	(vertical min, descent)
length[3, 7]	top		(vertical max, ascent)


m2_size {
  uint16_t length[8];
};

Size 1x1 has top=1 and right=1, bottom=0 and left=0

GetIdx(is_border, is_vertical, is_max)
	idx = is_border
	idx <<= 1;
	idx += is_vertical
	idx <<= 1
	idx += is_max
	return idx

GetSize(el_ptr, &m2_size)
  m2_size = {0,0,0,0,0,0,0,0}
  CalculateInnerSize(el_ptr, &m2_size)
  ExpandWithBorder(el_ptr, &m2_size)
  
  
  

SetSizeZeroD(m2_size, idx)
  length[idx] = 0;

SetSizeAllZero(m2_size)
	for( i = 0; i < 8; i++ )
		length[idx] = 0;

MaxSize(m2_size_dest, m2_size_src, idx)
  m2_size_dest.length[idx] = max(m2_size_dest.length[idx], m2_size_src.length[idx])



=============
Recursive Position Calculation
Used for: (A) drawing, (B) touched button identification


